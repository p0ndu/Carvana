// <auto-generated />
using System;
using System.Collections.Generic;
using Carvana.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Carvana.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250327203739_AddFeaturesColumnToCar")]
    partial class AddFeaturesColumnToCar
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Carvana.Car", b =>
                {
                    b.Property<Guid>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Features")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Mileage")
                        .HasColumnType("integer");

                    b.Property<Guid>("ModelID")
                        .HasColumnType("uuid");

                    b.Property<int>("PricePerDay")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleStatus")
                        .HasColumnType("integer");

                    b.HasKey("CarId");

                    b.HasIndex("ModelID");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Carvana.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerID");

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Carvana.Model", b =>
                {
                    b.Property<Guid>("ModelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumSeats")
                        .HasColumnType("integer");

                    b.HasKey("ModelID");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Carvana.Services.License", b =>
                {
                    b.Property<string>("LicenseNumber")
                        .HasColumnType("text");

                    b.HasKey("LicenseNumber");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("Carvana.Services.RentalContract", b =>
                {
                    b.Property<Guid>("ContractID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CarID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.HasKey("ContractID");

                    b.HasIndex("CarID");

                    b.HasIndex("CustomerID");

                    b.ToTable("RentalContracts");
                });

            modelBuilder.Entity("Carvana.Car", b =>
                {
                    b.HasOne("Carvana.Model", "CarModel")
                        .WithMany("Cars")
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarModel");
                });

            modelBuilder.Entity("Carvana.Customer", b =>
                {
                    b.HasOne("Carvana.Services.License", "License")
                        .WithOne("Customer")
                        .HasForeignKey("Carvana.Customer", "LicenseNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");
                });

            modelBuilder.Entity("Carvana.Services.RentalContract", b =>
                {
                    b.HasOne("Carvana.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carvana.Customer", "Customer")
                        .WithMany("RentalContracts")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Carvana.Customer", b =>
                {
                    b.Navigation("RentalContracts");
                });

            modelBuilder.Entity("Carvana.Model", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Carvana.Services.License", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
